import { Moment } from "moment-jalaali";
export declare const useRangepicker: () => {
    dateRange: import("../..").RangeValue;
    onRangeDaychange: (payload: import("../..").Date, isStartDate: boolean) => void;
    onRangeMonthchange: (month: number, mode: "from" | "to") => void;
    onRangeYearchange: (year: number, mode: "from" | "to") => void;
    onRangeIncreaseYear: () => void;
    onRangeDecreaseYear: () => void;
    onRangeIncreaseMonth: () => void;
    onRangeDecreaseMonth: () => void;
    changeFrom: (date: Partial<import("../..").Date>) => void;
    changeTo: (date: Partial<import("../..").Date>) => void;
    changePlaceholder: (date: import("../..").Date | null) => void;
    from: import("../..").Date;
    to: import("../..").Date;
    offsets: [number, number];
    setOffsets: (offsets: [number, number]) => void;
    value?: [Moment, Moment | null] | null | undefined;
    onChange?: ((date: [Moment, Moment | null] | null, dateStrings: [string, string]) => void) | undefined;
    format?: string | (((value: [Moment, Moment]) => string) & string) | undefined;
    disabledDates?: ((current: Moment) => boolean) | undefined;
    rangeState: import("../..").RangeDate;
    onRangeDateChange: (payload: import("../..").RangeDate) => void;
    isJalaali: boolean;
    locale: import("../..").Locale;
    months: import("../..").Month[];
    dayLabels: string[];
    cacheRangeDate: import("../..").RangeDate | undefined;
    rangeStateMoment: [Moment, Moment | null] | null;
};
//# sourceMappingURL=useRangePicker.d.ts.map